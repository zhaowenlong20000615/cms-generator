import {
  Body,
  Controller,
  Get,
  HttpException,
  HttpStatus,
  Param,
  ParseIntPipe,
  Post,
  Put,
  Redirect,
  Render,
  Res,
  Headers,
  Delete,
  UseFilters,
  applyDecorators,
} from '@nestjs/common'
import { I18n, I18nContext } from 'nestjs-i18n'
import { Create<%= classify(entityName) %>Dto, Update<%= classify(entityName) %>Dto } from 'src/shared/dto/<%= dasherize(entityName) %>.dto'
import { <%= classify(entityName) %>Service } from 'src/shared/services/<%= dasherize(entityName) %>.service'
import { Result } from 'src/shared/vo/result'
import { Response } from 'express'
import { ApiBody, ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger'
import { AdminExectionFilter } from '../filters/admin-exection.filter'
import {  <%= classify(entityName) %> } from 'src/shared/entities/<%= dasherize(entityName) %>.entity'

@Controller('admin/<%= dasherize(plural(entityName)) %>')
@UseFilters(AdminExectionFilter)
@ApiTags('admin/<%= dasherize(plural(entityName)) %>')
export class <%= classify(entityName) %>Controller {
  constructor(private readonly <%= camelize(entityName) %>Service: <%= classify(entityName) %>Service) {}

  @Get()
  @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-list')
  @ApiFindAll()
  async findAll() {
    const <%= camelize(entityName) %>Tree = await this.<%= camelize(entityName) %>Service.findAll()
    return { <%= camelize(entityName) %>Tree }
  }

  @Get('create')
  @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-form')
  async createForm() {
    const <%= camelize(entityName) %>Tree = await this.<%= camelize(entityName) %>Service.findAll()
    return { <%= camelize(entityName) %>Tree, <%= camelize(entityName) %>: {} }
  }

  @Get(':id')
  @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-detail')
  @ApiFindOne()
  async findOne(@Param('id', ParseIntPipe) id: number) {
    const <%= camelize(entityName) %> = await this.<%= camelize(entityName) %>Service.findOne({ where: { id }, relations: ['parent', 'children'] })
    return { <%= camelize(entityName) %> }
  }

  @Post()
  @Redirect('/admin/<%= dasherize(plural(entityName)) %>')
  @ApiCreate()
  async create(@Body() create<%= classify(entityName) %>Dto: Create<%= classify(entityName) %>Dto) {
    await this.<%= camelize(entityName) %>Service.create(create<%= classify(entityName) %>Dto)
    return Result.success('创建成功')
  }

  @Get('edit/:id')
  @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-form')
  async editForm(@Param('id', ParseIntPipe) id: number) {
    const <%= camelize(entityName) %> = await this.<%= camelize(entityName) %>Service.findOne({ where: { id }, relations: ['parent', 'children'] })
    const <%= camelize(entityName) %>Tree = await this.<%= camelize(entityName) %>Service.findAll()
    if (<%= camelize(entityName) %>) return { <%= camelize(entityName) %>, <%= camelize(entityName) %>Tree }
    throw new HttpException('该<%= camelize(entityName) %>不存在', HttpStatus.NOT_FOUND)
  }

  @Put(':id')
  @ApiUpdate()
  async update(
    @Param('id', ParseIntPipe) id: number,
    @Body() update<%= classify(entityName) %>Dto: Update<%= classify(entityName) %>Dto,
    @Res({ passthrough: true }) res: Response,
    @Headers('accept') accept: string,
    @I18n() i18n: I18nContext,
  ) {
    const result = await this.<%= camelize(entityName) %>Service.update(id, update<%= classify(entityName) %>Dto)
    if (accept === 'application/json' && result.affected === 1) return Result.success(i18n.t('response.editSuccess'))
    if (result.affected === 1) res.redirect('/admin/<%= dasherize(plural(entityName)) %>')
    throw new HttpException('该<%= camelize(entityName) %>不存在', HttpStatus.NOT_FOUND)
  }

  @Delete(':id')
  @ApiDelete()
  async delete(@Param('id', ParseIntPipe) id: number, @I18n() i18n: I18nContext) {
    const res = await this.<%= camelize(entityName) %>Service.delete(id)
    if (res.affected === 1) return Result.success(i18n.t('response.deleteSuccess'))
    throw new HttpException('该<%= camelize(entityName) %>不存在', HttpStatus.NOT_FOUND)
  }
}

function ApiFindAll() {
  return applyDecorators(
    ApiOperation({ summary: '获取所有<%= camelize(entityName) %>列表' }),
    ApiResponse({ status: HttpStatus.OK, description: '成功返回<%= camelize(entityName) %>列表', type: [<%= classify(entityName) %>] }),
  )
}

function ApiFindOne() {
  return applyDecorators(
    ApiOperation({ summary: '根据ID获取某个<%= camelize(entityName) %>信息' }),
    ApiParam({ name: 'id', description: '<%= camelize(entityName) %>ID', type: Number }),
    ApiResponse({ status: HttpStatus.OK, description: '成功返回<%= camelize(entityName) %>信息', type: <%= classify(entityName) %> }),
    ApiResponse({ status: HttpStatus.NOT_FOUND, description: '<%= camelize(entityName) %>未找到' }),
  )
}

function ApiCreate() {
  return applyDecorators(
    ApiOperation({ summary: '创建新<%= camelize(entityName) %>' }),
    ApiBody({ description: '<%= camelize(entityName) %>DTO', type: Create<%= classify(entityName) %>Dto }),
    ApiResponse({ status: HttpStatus.CREATED, description: '<%= camelize(entityName) %>创建成功', type: <%= classify(entityName) %> }),
    ApiResponse({ status: HttpStatus.BAD_REQUEST, description: '请求参数错误' }),
  )
}

function ApiUpdate() {
  return applyDecorators(
    ApiOperation({ summary: '更新<%= camelize(entityName) %>信息' }),
    ApiParam({ name: 'id', description: '<%= camelize(entityName) %>ID', type: Number }),
    ApiBody({ description: '更新<%= camelize(entityName) %>DTO', type: Update<%= classify(entityName) %>Dto }),
    ApiResponse({ status: HttpStatus.OK, description: '<%= camelize(entityName) %>信息更新成功', type: Result }),
    ApiResponse({ status: HttpStatus.BAD_REQUEST, description: '请求参数错误' }),
    ApiResponse({ status: HttpStatus.NOT_FOUND, description: '<%= camelize(entityName) %>未找到' }),
  )
}

function ApiDelete() {
  return applyDecorators(
    ApiOperation({ summary: '根据ID删除<%= camelize(entityName) %>' }),
    ApiParam({ name: 'id', description: '<%= camelize(entityName) %>ID', type: Number }),
    ApiResponse({ status: HttpStatus.OK, description: '<%= camelize(entityName) %>删除成功', type: Result }),
    ApiResponse({ status: HttpStatus.NOT_FOUND, description: '<%= camelize(entityName) %>未找到' }),
  )
}
